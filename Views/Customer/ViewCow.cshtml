@model AgriChoice.Models.Cow

@{
    ViewData["Title"] = "View Cow";
}

<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex items-center justify-between mb-6">
        <h1 class="text-3xl font-bold text-gray-900 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
            Cow Details
        </h1>
        @if (User.IsInRole("Admin"))
        {
            <a asp-controller="Admin" asp-action="ManageCows" class="inline-flex items-center text-indigo-600 hover:text-indigo-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Back to Manage Cows
            </a>
        }
        else
        {
            <a asp-controller="Customer" asp-action="BrowseCows" class="inline-flex items-center text-indigo-600 hover:text-indigo-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Back to Browse
            </a>
        }
    </div>

    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <div class="md:flex">
            <!-- Image Section -->
            <div class="md:w-1/2">
                <div class="h-80 md:h-full w-full relative">
                    <img src="@Model.ImageUrl" onclick="openImageModal('@Model.ImageUrl', '@(string.IsNullOrEmpty(Model.Name) ? Model.Breed : Model.Name)')" alt="@Model.Breed" class="absolute inset-0 w-full h-full object-fill" />
                    @if (!Model.IsAvailable)
                    {
                        <div class="absolute top-4 right-4">
                            <span class="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                                Sold Out
                            </span>
                        </div>
                    }
                    @if (Model.IsAvailable)
                    {
                        <div class="absolute top-4 right-4">
                            <span class="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                                Available
                            </span>
                        </div>
                    }
                </div>
            </div>

            <!-- Details Section -->
            <div class="md:w-1/2 p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-bold text-gray-800">@Model.Name</h2>
                    <span class="text-2xl font-bold text-indigo-600">@Model.Price.ToString("C")</span>
                </div>

                <div class="space-y-4">
                    <div class="flex items-center">
                        <span class="w-24 text-sm font-medium text-gray-500">Breed:</span>
                        <span class="text-gray-900 font-medium">@Model.Breed</span>
                    </div>
                    <div class="flex items-center">
                        <span class="w-24 text-sm font-medium text-gray-500">Gender:</span>
                        <span class="text-gray-900 font-medium">@Model.Gender</span>
                    </div>
                    <div class="flex items-center">
                        <span class="w-24 text-sm font-medium text-gray-500">Age:</span>
                        <span class="text-gray-900 font-medium">@Model.Age months</span>
                    </div>
                    <div class="flex items-center">
                        <span class="w-24 text-sm font-medium text-gray-500">Weight:</span>
                        <span class="text-gray-900 font-medium">@Model.Weight kg</span>
                    </div>
                    <div class="flex items-center">
                        <span class="w-24 text-sm font-medium text-gray-500">Status:</span>
                        <span class="@(Model.IsAvailable ? "text-green-600" : "text-red-600") font-medium">
                            @(Model.IsAvailable ? "Available for Purchase" : "Sold Out")
                        </span>
                    </div>
                </div>

                <div class="mt-6">
                    <h3 class="text-lg font-medium text-gray-900">Description</h3>
                    <p class="mt-2 text-gray-700">@Model.Description</p>
                </div>

                <div class="mt-8">
                    @if (User.IsInRole("Admin"))
                    {
                        <!-- Admin Actions -->
                        <div class="flex flex-wrap gap-3">
                            <a asp-controller="Admin" asp-action="EditCow" asp-route-id="@Model.CowId"
                               class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                </svg>
                                Edit
                            </a>
                            <a asp-controller="Admin" asp-action="DeleteCow" asp-route-id="@Model.CowId"
                               onclick="return confirm('Are you sure you want to delete this cow?');"
                               class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                                Delete
                            </a>
                        </div>
                    }
                    else
                    {
                        <!-- Customer Actions -->
                        @if (Model.IsAvailable)
                        {
                            <form id="add-to-cart-form" asp-action="AddToCart" method="post" class="space-y-6">
                                <input type="hidden" name="id" value="@Model.CowId" />
                                <button type="submit" class="inline-flex items-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
                                    </svg>
                                    Add To Cart
                                </button>
                            </form>

                        }
                        else
                        {
                            <button disabled
                                    class="inline-flex items-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-400 cursor-not-allowed">
                                <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                                </svg>
                                Sold Out
                            </button>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div id="toast" class="hidden fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded shadow"></div>

<!-- Add location modal -->
<div id="locationModal" class="hidden fixed z-10 inset-0 overflow-y-auto">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <div>
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 2a10 10 0 0110 10c0 3.866-2.11 7.093-5.25 8.75L12 22l-4.75-1.25C4.11 19.093 2 15.866 2 12a10 10 0 0110-10z" />
                    </svg>
                </div>
                <div class="mt-3 text-center sm:mt-5">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Provide Your Location</h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500">To proceed, please allow us to access your location or manually input your delivery address.</p>
                    </div>
                </div>
            </div>
            <div class="mt-5 sm:mt-6">
                <button id="getLocationButton" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:text-sm">
                    Use Current Location
                </button>
                <div class="mt-3 text-center">
                    <span class="text-sm text-gray-500">or</span>
                </div>
                <input type="text" id="manualAddress" placeholder="Enter delivery address" class="mt-3 w-full px-3 py-2 border rounded-md text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm">
                <button id="confirmAddressButton" class="mt-3 w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                    Confirm Address
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById("add-to-cart-form").addEventListener("submit", async function (e) {
        e.preventDefault();

        const form = e.target;
        const formData = new FormData(form);

        const response = await fetch(form.action, {
            method: "POST",
            headers: {
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            showToast(result.message);
            document.getElementById('cartButton').click();
        } else if (result.triggerModal) {
            openLocationModal();
        } else {
            showToast(result.message, true);
        }
    });

    function showToast(message, isError = false) {
        const toast = document.getElementById("toast");
        toast.textContent = message;
        toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded shadow ${isError ? 'bg-red-600' : 'bg-green-600'} text-white`;
        toast.classList.remove("hidden");

        setTimeout(() => {
            toast.classList.add("hidden");
        }, 3000);
    }

    function openLocationModal() {
        const modal = document.getElementById("locationModal");
        modal.classList.remove("hidden");
    }

    function closeLocationModal() {
        const modal = document.getElementById("locationModal");
        modal.classList.add("hidden");
    }

   document.getElementById("getLocationButton").addEventListener("click", function () {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(async (position) => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            try {
                // Convert coordinates to address using Nominatim (OpenStreetMap)
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`);
                const data = await response.json();
                
                // Format the address from the response
                const address = data.display_name;
                
                closeLocationModal();
                await submitLocation(address);
            } catch (error) {
                console.error("Error getting address from coordinates:", error);
                // Fallback to raw coordinates if geocoding fails
                const coords = `${lat}, ${lng}`;
                closeLocationModal();
                await submitLocation(coords);
            }
        }, (error) => {
            alert("Unable to retrieve location. Please input your address manually.");
        });
    } else {
        alert("Geolocation is not supported by your browser.");
    }
});

    document.getElementById("confirmAddressButton").addEventListener("click", async function () {
        const address = document.getElementById("manualAddress").value;
        if (!address.trim()) {
            alert("Please enter a valid address.");
            return;
        }
        closeLocationModal();
        await submitLocation(address);
    });

    async function submitLocation(location) {
        const form = new FormData();
        form.append("deliveryAddress", location);

        const response = await fetch("/Customer/SetDeliveryAddress", {
            method: "POST",
            headers: {
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: form
        });

        const result = await response.json();
        if (result.success) {
            showToast("Delivery address set successfully!");
        } else {
            showToast("Failed to set delivery address.", true);
        }
    }
</script>