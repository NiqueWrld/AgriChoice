@using System.Linq
@using AgriChoice.Services
@model AgriChoice.Models.Cart
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject PaymentService PaymentService

@{
    ViewData["Title"] = "Checkout";
    var braintreeClientToken = PaymentService.GenerateClientTokenAsync().Result;
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Page Title -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <h1 class="text-3xl font-bold text-gray-900 flex items-center mb-4 sm:mb-0">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0
                         002 2h2m2 4h10a2 2 0
                         002-2v-6a2 2 0
                         00-2-2H9a2 2 0
                         00-2 2v6a2 2 0
                         002 2zm7-5a2 2 0
                         11-4 0 2 2 0
                         014 0z" />
            </svg>
            Complete Your Purchase
        </h1>
        <a href="/Customer/BrowseCows" class="text-indigo-600 hover:text-indigo-800 flex items-center font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd"
                      d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0
                         010-1.414l6-6a1 1 0
                         011.414 1.414L5.414 9H17a1 1 0
                         110 2H5.414l4.293 4.293a1 1 0
                         010 1.414z"
                      clip-rule="evenodd" />
            </svg>
            Continue Shopping
        </a>
    </div>

    @if (Model != null && Model.Items.Any())
    {
        <div class="bg-white shadow-lg rounded-lg overflow-hidden">
            <form asp-action="Checkout" method="post" class="md:grid md:grid-cols-3 gap-6">
                @Html.AntiForgeryToken()
                <!-- Left Column (Address + Items) -->
                <div class="md:col-span-2 p-6">
                    <!-- Delivery Address Form -->
                    <div class="mb-8">
                        <h2 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M17.657 16.657L13.414 20.9a1.998 1.998 0
                                         01-2.827 0l-4.244-4.243a8 8 0
                                         1111.314 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M15 11a3 3 0
                                         11-6 0 3 3 0
                                         016 0z" />
                            </svg>
                            Delivery Address
                        </h2>
                        <div class="bg-gray-50 p-6 rounded-lg shadow-sm">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <!-- Name -->
                                <div class="col-span-full md:col-span-2">
                                    <label for="fullName" class="block text-sm font-medium text-gray-700">Full Name</label>
                                    <input type="text" id="fullName" name="fullName"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm h-10"
                                           placeholder="Your full name" required />
                                </div>
                                <!-- Address Line 1 -->
                                <div class="col-span-full">
                                    <label for="addressLine1" class="block text-sm font-medium text-gray-700">Address Line 1</label>
                                    <input type="text" value="@ViewBag.Adress" id="addressLine1" name="addressLine1"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm h-10"
                                           placeholder="Street address" required />
                                </div>
                                <!-- Address Line 2 -->
                                <div class="col-span-full">
                                    <label for="addressLine2" class="block text-sm font-medium text-gray-700">Address Line 2 (Optional)</label>
                                    <input type="text" id="addressLine2" name="addressLine2"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm h-10"
                                           placeholder="Apartment, suite, etc." />
                                </div>
                                <!-- City -->
                                <div>
                                    <label for="city" class="block text-sm font-medium text-gray-700">City</label>
                                    <input type="text" id="city" name="city"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm h-10"
                                           placeholder="City" required />
                                </div>
                                <!-- State -->
                                <div>
                                    <label for="state" class="block text-sm font-medium text-gray-700">State/Province</label>
                                    <input type="text" id="state" name="state"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm h-10"
                                           placeholder="State" required />
                                </div>
                                <!-- Zip -->
                                <div>
                                    <label for="zipCode" class="block text-sm font-medium text-gray-700">ZIP / Postal Code</label>
                                    <input type="text" id="zipCode" name="zipCode"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm h-10"
                                           placeholder="ZIP / Postal code" required />
                                </div>
                                <!-- Phone -->
                                <div>
                                    <label for="phone" class="block text-sm font-medium text-gray-700">Phone Number</label>
                                    <input type="tel" id="phone" name="phone"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm h-10"
                                           placeholder="Phone number" required />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Items Summary -->
                    <div>
                        <h2 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                            </svg>
                            Your Items
                        </h2>
                        <div class="space-y-4">
                            @foreach (var item in Model.Items)
                            {
                                <div class="flex bg-gray-50 rounded-lg overflow-hidden shadow-sm">
                                    <div class="w-24 h-24 flex-shrink-0">
                                        <img src="@item.Cow.ImageUrl" alt="@item.Cow.Name" class="w-full h-full object-cover" />
                                    </div>
                                    <div class="flex-grow p-4">
                                        <div class="flex justify-between">
                                            <div>
                                                <h4 class="text-sm font-medium text-gray-900">@item.Cow.Name</h4>
                                                <p class="text-sm text-gray-500">@item.Cow.Breed</p>
                                                <p class="text-sm font-semibold text-indigo-600 mt-1">@item.Cow.Price.ToString("C", new System.Globalization.CultureInfo("en-ZA"))</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Right Column - Order Summary + Payment -->
                <div class="md:col-span-1 bg-gray-50 p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0
                                     002 2h10a2 2 0 002-2V7a2 2 0
                                     00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0
                                     002-2M9 5a2 2 0 012-2h2a2 2 0
                                     012 2" />
                        </svg>
                        Order Summary
                    </h2>
                    <div class="space-y-4">
                        @foreach (var item in Model.Items)
                        {
                            <div class="flex justify-between items-center py-3 border-b border-gray-200 last:border-b-0">
                                <div>
                                    <p class="text-sm font-medium text-gray-900">@item.Cow.Name</p>
                                    <p class="text-xs text-gray-500">@item.Cow.Breed</p>
                                </div>
                                <div class="flex items-center">
                                    <p class="text-sm font-medium text-gray-900 mr-4">@item.Cow.Price.ToString("C", new System.Globalization.CultureInfo("en-ZA"))</p>
                                    <button type="button"
                                            data-id="@item.CowId"
                                            data-token="@Antiforgery.GetAndStoreTokens(Context).RequestToken"
                                            class="remove-from-cart-btn inline-flex items-center justify-center p-2 border border-transparent rounded-md text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                  d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1
                                                     0 000 2v10a2 2 0 002 2h8a2 2
                                                     0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1
                                                     0 0011 2H9zM7 8a1 1 0 012
                                                     0v6a1 1 0 11-2
                                                     0V8zm5-1a1 1 0 00-1
                                                     1v6a1 1 0 102
                                                     0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        }

                        <!-- Totals -->
                        <div class="pt-2">
                            <div class="flex justify-between py-2">
                                <p class="text-sm text-gray-500">Total Cows</p>
                                <p class="text-sm font-medium text-gray-900">@Model.Items.Count()</p>
                            </div>
                            <div class="flex justify-between py-2 border-t border-gray-200">
                                <p class="text-base font-medium text-gray-900">Sub Total</p>
                                <p class="text-base font-bold text-indigo-600">@Model.SubTotal.ToString("C", new System.Globalization.CultureInfo("en-ZA"))</p>
                            </div>
                            <div class="flex justify-between py-2 border-t border-gray-200">
                                <p class="text-base font-medium text-gray-900">Tax</p>
                                <p class="text-base font-bold text-indigo-600">@Model.Tax.ToString("C", new System.Globalization.CultureInfo("en-ZA"))</p>
                            </div>
                            <div class="flex justify-between py-2 border-t border-gray-200">
                                <p class="text-base font-medium text-gray-900">Shipping</p>
                                <p class="text-base font-bold text-indigo-600">@Model.ShippingCost.ToString("C", new System.Globalization.CultureInfo("en-ZA"))</p>
                            </div>
                            <div class="flex justify-between py-2 border-t border-gray-200">
                                <p class="text-base font-medium text-gray-900">Total</p>
                                <p class="text-base font-bold text-indigo-600">@Model.TotalCost.ToString("C", new System.Globalization.CultureInfo("en-ZA"))</p>
                            </div>
                        </div>

                        <!-- Braintree Drop-in UI Integration -->
                        <div class="mt-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Payment Method</label>
                            <div id="dropin-container" class="bg-white p-4 rounded-md shadow-sm"></div>
                        </div>

                        <div class="mt-6 space-y-3">
                            <button id="purchaseButton" type="submit" disabled
                                    class="w-full inline-flex justify-center py-3 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 disabled:opacity-50 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                <span id="purchaseButtonText">Confirm Purchase</span>
                                <svg id="loadingSpinner" class="hidden ml-2 h-5 w-5 text-white animate-spin"
                                     xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10"
                                            stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor"
                                          d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z">
                                    </path>
                                </svg>
                            </button>
                        </div>

                        <div class="pt-4 border-t border-gray-200">
                            <div class="flex items-center justify-center text-sm text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M12 15v2m-6 4h12a2 2 0
                                             002-2v-6a2 2 0
                                             00-2-2H6a2 2 0
                                             00-2 2v6a2 2 0
                                             002 2zm10-10V7a4 4 0
                                             00-8 0v4h8z" />
                                </svg>
                                Secure checkout with Braintree Sandbox
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="bg-white shadow rounded-lg p-8 text-center">
            <div class="mx-auto flex items-center justify-center h-24 w-24 rounded-full bg-indigo-100">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4
                             5M7 13l-2.293 2.293c-.63.63-.184
                             1.707.707 1.707H17m0 0a2 2 0
                             100 4 2 2 0 000-4zm-8 2a2 2 0
                             11-4 0 2 2 0 014 0z" />
                </svg>
            </div>
            <h2 class="mt-4 text-lg font-medium text-gray-900">Your cart is empty</h2>
            <p class="mt-2 text-sm text-gray-500">Add some items to your cart to continue with checkout.</p>
            <div class="mt-6">
                <a href="/Customer/BrowseCows"
                   class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600
                          hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg xmlns="http://www.w3.org/2000/svg"
                         class="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Browse Cows
                </a>
            </div>
        </div>
    }
</div>

<div id="toast" class="hidden fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded shadow" style="z-index: 99999;"></div>


@section Scripts {
    <script src="https://js.braintreegateway.com/web/dropin/1.30.0/js/dropin.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dropinContainer = document.getElementById("dropin-container");
            const purchaseButton = document.getElementById("purchaseButton");
            const purchaseButtonText = document.getElementById("purchaseButtonText");
            const loadingSpinner = document.getElementById("loadingSpinner");

            // Braintree setup
            braintree.dropin.create({
                authorization: "@braintreeClientToken",
                container: dropinContainer
            }, function (createErr, instance) {
                if (createErr) {
                    console.error(createErr);
                    return;
                }

                // Enable button once dropin is ready
                purchaseButton.disabled = false;

                purchaseButton.addEventListener("click", function (e) {
                    e.preventDefault(); // Prevent form submission
                    if (!validateCheckoutForm()) {
                        return;
                    }

                    purchaseButtonText.textContent = "Processing...";
                    loadingSpinner.classList.remove("hidden");
                    purchaseButton.disabled = true;

                    instance.requestPaymentMethod(async function (err, payload) {
                        if (err) {
                            console.error(err);
                            restoreButton();
                            return;
                        }

                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                        const data = {
                            fullName: document.getElementById("fullName").value,
                            addressLine1: document.getElementById("addressLine1").value,
                            addressLine2: document.getElementById("addressLine2").value,
                            city: document.getElementById("city").value,
                            state: document.getElementById("state").value,
                            zipCode: document.getElementById("zipCode").value,
                            phone: document.getElementById("phone").value,
                            paymentMethodNonce: payload.nonce
                        };

                        const response = await fetch("/Customer/Checkout", {
                            method: "POST",
                            headers: {
                                "RequestVerificationToken": token,
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(data),
                        });

                        const result = await response.json();

                        if (result.success) {
                            showToast(result.message);
                            setTimeout(() => {
                                window.location.href = "/Customer/MyOrders";
                            }, 1000);
                        } else {
                            showToast(result.message, true);
                            restoreButton();
                        }
                    });
                });
            });

            // Remove item from cart
            document.querySelectorAll(".remove-from-cart-btn").forEach((button) => {
                button.addEventListener("click", async function () {
                    const id = button.getAttribute("data-id");
                    const token = button.getAttribute("data-token");

                    const response = await fetch("/Customer/RemoveFromCart", {
                        method: "POST",
                        headers: {
                            "RequestVerificationToken": token,
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ id }),
                    });

                    const result = await response.json();

                    if (result.success) {
                        showToast(result.message);
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    } else {
                        showToast(result.message, true);
                    }
                });
            });

            function validateCheckoutForm() {
                const fullName = document.getElementById("fullName").value.trim();
                const addressLine1 = document.getElementById("addressLine1").value.trim();
                const city = document.getElementById("city").value.trim();
                const state = document.getElementById("state").value.trim();
                const zipCode = document.getElementById("zipCode").value.trim();
                const phone = document.getElementById("phone").value.trim();

                if (!fullName) {
                    showToast("Full name is required.", true);
                    return false;
                }
                if (!addressLine1) {
                    showToast("Address Line 1 is required.", true);
                    return false;
                }
                if (!city) {
                    showToast("City is required.", true);
                    return false;
                }
                if (!state) {
                    showToast("State/Province is required.", true);
                    return false;
                }

                if (!zipCode || !/^\d{4}$/.test(zipCode)) {
                    showToast("Valid ZIP/Postal code is required (4 digits).", true);
                    return false;
                }

                if (!phone || !/^\d{10}$/.test(phone)) {
                    showToast("Valid 10-digit phone number is required.", true);
                    return false;
                }

                return true;
            }

            function showToast(message, isError = false) {
                const toast = document.getElementById("toast");
                toast.textContent = message;
                toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded shadow ${isError ? "bg-red-600" : "bg-green-600"
                    } text-white`;
                toast.classList.remove("hidden");

                setTimeout(() => {
                    toast.classList.add("hidden");
                }, 3000);
            }

            function restoreButton() {
                purchaseButtonText.textContent = "Confirm Purchase";
                loadingSpinner.classList.add("hidden");
                purchaseButton.disabled = false;
            }
        });
    </script>
}